"use client"

import { useState, useEffect } from "react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Progress } from "@/components/ui/progress"
import { Badge } from "@/components/ui/badge"
import {
  Eye,
  Clock,
  CheckCircle,
  MousePointerClick,
  AlertTriangle,
  Info,
  Users,
  Settings,
  TrendingUp,
  Megaphone,
  DollarSign,
  Building,
} from "lucide-react"
import type { DifficultyLevel } from "@/app/page"

interface VulnerabilityGameProps {
  teamName: string
  department: string
  difficultyLevel: DifficultyLevel
  onComplete: (score: number) => void
}

/* ------------------------------------------------------------------
  Office ‚Äúblue-print‚Äù with interactive hotspots.  Each hotspot holds:
  ‚Ä¢ x / y  ‚Äì percentage coordinates
  ‚Ä¢ description ‚Äì what‚Äôs wrong
  ‚Ä¢ hint ‚Äì short clue that appears on hover
------------------------------------------------------------------- */
const baseVulnerabilities = [
  {
    id: 1,
    x: 18,
    y: 28,
    description: "Sticky note password on monitor",
    hint: "üìù  Sticky note?",
  },
  {
    id: 2,
    x: 48,
    y: 62,
    description: "Unlocked laptop showing client data",
    hint: "üîì  Unlocked?",
  },
  {
    id: 3,
    x: 74,
    y: 32,
    description: "Unknown USB device plugged in",
    hint: "USB?",
  },
  {
    id: 4,
    x: 28,
    y: 78,
    description: "Confidential files left on printer tray",
    hint: "Printer?",
  },
  {
    id: 5,
    x: 86,
    y: 70,
    description: "Smart-phone left unlocked on desk",
    hint: "üì±  Phone?",
  },
  {
    id: 6,
    x: 58,
    y: 18,
    description: "Unescorted visitor in restricted zone",
    hint: "üë§  Visitor?",
  },
  {
    id: 7,
    x: 36,
    y: 46,
    description: "Tailgating through secure door",
    hint: "üö™  Door?",
  },
] as const

/* Optionally vary scene by department ‚Äì right now we return same set,
   but hook is ready for future department-specific hotspots           */
function useDepartmentVulns(dept: string) {
  // could filter/extend based on department
  return baseVulnerabilities
}

/* Returns an icon representing the chosen department for header */
function getDeptIcon(department: string) {
  const icons = {
    hr: Users,
    it: Settings,
    sales: TrendingUp,
    marketing: Megaphone,
    finance: DollarSign,
    operations: Settings,
    general: Building,
  }
  return icons[department as keyof typeof icons] || Building
}

export default function VulnerabilityGame({
  teamName,
  department,
  difficultyLevel,
  onComplete,
}: VulnerabilityGameProps) {
  const vulnerabilities = useDepartmentVulns(department)
  const total = vulnerabilities.length

  const [found, setFound] = useState<number[]>([])

  const getTimeLimit = (difficulty: DifficultyLevel) => {
    switch (difficulty) {
      case "beginner":
        return 90
      case "intermediate":
        return 75
      case "advanced":
        return 60
      case "expert":
        return 45
      default:
        return 90
    }
  }

  const [timeLeft, setTimeLeft] = useState(getTimeLimit(difficultyLevel))
  const [started, setStarted] = useState(false)
  const [ended, setEnded] = useState(false)
  const [activeHint, setActiveHint] = useState<string | null>(null)

  // countdown timer
  useEffect(() => {
    if (!started || ended) return
    if (timeLeft === 0) {
      setEnded(true)
      return
    }
    const t = setTimeout(() => setTimeLeft((s) => s - 1), 1000)
    return () => clearTimeout(t)
  }, [started, timeLeft, ended])

  const handleSpotClick = (id: number) => {
    if (!started || ended) return
    if (!found.includes(id)) setFound([...found, id])
  }

  const completeGame = () => {
    const score = found.length * 15 // 15 pts each
    onComplete(score)
  }

  const DeptIcon = getDeptIcon(department)

  /* ---------------------------------  UI  --------------------------------- */
  return (
    <div className="min-h-screen flex items-center justify-center p-4 bg-gradient-to-br from-purple-50 via-pink-50 to-rose-50 dark:from-gray-900 dark:via-purple-900/20 dark:to-pink-900/20">
      <Card className="w-full max-w-6xl mx-auto shadow-2xl border-0 bg-white/95 dark:bg-gray-800/95 backdrop-blur-sm">
        <CardHeader className="text-center space-y-4 bg-gradient-to-r from-purple-600 to-pink-600 text-white rounded-t-lg">
          <div className="flex items-center justify-center space-x-3">
            <DeptIcon className="w-6 h-6" />
            <Eye className="w-8 h-8" />
            <CardTitle className="text-2xl font-bold">Spot the Vulnerability ‚Äì {teamName}</CardTitle>
            <Badge className="bg-white/20 text-white border-white/30">
              {difficultyLevel.charAt(0).toUpperCase() + difficultyLevel.slice(1)}
            </Badge>
          </div>

          <div className="flex justify-between items-center px-2 sm:px-8 text-sm">
            <div className="flex items-center space-x-2">
              <Clock className="w-4 h-4 text-red-200" />
              <span className="font-mono">
                {Math.floor(timeLeft / 60)}:{(timeLeft % 60).toString().padStart(2, "0")}
              </span>
            </div>
            <div className="text-center hidden sm:block">
              <p className="text-xs mb-1">
                Found {found.length} / {total}
              </p>
              <Progress value={(found.length / total) * 100} className="w-40 bg-purple-200" />
            </div>
          </div>
        </CardHeader>

        <CardContent className="space-y-6 p-6">
          {/* BEFORE START  -------------------------------------------------- */}
          {!started && (
            <>
              <div className="bg-purple-50 p-6 rounded-xl border-l-4 border-purple-400 shadow-inner">
                <h3 className="text-xl font-semibold mb-3 text-gray-800 flex items-center space-x-2">
                  <MousePointerClick className="w-6 h-6 text-purple-600" />
                  <span>How it works</span>
                </h3>
                <ul className="list-disc pl-5 text-gray-700 space-y-1">
                  <li>
                    You have <strong>90 seconds</strong> to find security mistakes hidden in the scene.
                  </li>
                  <li>Hover to see a quick hint. Click directly on the risky item.</li>
                  <li>
                    Each correct find earns <strong>15 points</strong> and explains why it‚Äôs risky.
                  </li>
                  <li>Find all {total} vulnerabilities to maximize your score!</li>
                </ul>
              </div>

              <div className="text-center">
                <Button
                  onClick={() => setStarted(true)}
                  className="px-10 py-3 text-lg bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700 shadow-lg transform hover:scale-105 transition-all duration-300"
                >
                  Start the Hunt
                </Button>
              </div>
            </>
          )}

          {/* GAME BOARD  ---------------------------------------------------- */}
          {started && (
            <>
              <div
                className="relative rounded-lg overflow-hidden border-2 border-purple-200 shadow-inner bg-gradient-to-br from-gray-100 to-gray-200"
                style={{ height: 500 }}
              >
                {/* Simple flat illustration pieces */}
                {/* Desks */}
                <div className="absolute top-20 left-10 w-32 h-20 bg-amber-200 rounded" />
                <div className="absolute top-20 right-10 w-32 h-20 bg-amber-200 rounded" />
                <div className="absolute bottom-20 left-1/3 w-32 h-20 bg-amber-200 rounded" />

                {/* Computers */}
                <div className="absolute top-16 left-14 w-24 h-16 bg-gray-800 rounded" />
                <div className="absolute top-16 right-14 w-24 h-16 bg-gray-800 rounded" />
                <div className="absolute bottom-16 left-[38%] w-24 h-16 bg-gray-800 rounded" />

                {/* Door */}
                <div className="absolute top-1/2 right-0 w-4 h-24 bg-amber-600 rounded-l" />

                {/* Decorations */}
                <div className="absolute top-10 left-1/2 w-8 h-12 bg-green-400 rounded-full" />
                <div className="absolute bottom-10 right-1/3 w-6 h-10 bg-green-400 rounded-full" />

                {/* Hotspots */}
                {vulnerabilities.map((v) => {
                  const foundIt = found.includes(v.id)
                  return (
                    <div
                      key={v.id}
                      onMouseEnter={() => setActiveHint(foundIt ? null : v.hint)}
                      onMouseLeave={() => setActiveHint(null)}
                      onClick={() => handleSpotClick(v.id)}
                      className={`absolute w-8 h-8 rounded-full cursor-pointer transition-all duration-300 ${
                        foundIt
                          ? "bg-green-500 border-2 border-green-700"
                          : "bg-red-500/70 border-2 border-red-600 hover:scale-110"
                      }`}
                      style={{
                        left: `${v.x}%`,
                        top: `${v.y}%`,
                        transform: "translate(-50%, -50%)",
                      }}
                    >
                      {foundIt && <CheckCircle className="w-4 h-4 text-white m-auto" />}
                    </div>
                  )
                })}

                {/* Hover hint bubble */}
                {activeHint && (
                  <div className="absolute bottom-2 left-1/2 -translate-x-1/2 bg-black/70 text-white text-xs px-2 py-1 rounded">
                    {activeHint}
                  </div>
                )}

                {/* Overlay when time up or all found */}
                {(ended || found.length === total) && (
                  <div className="absolute inset-0 bg-black/60 flex flex-col items-center justify-center text-center p-6 space-y-4">
                    <AlertTriangle className="w-12 h-12 text-yellow-400" />
                    <p className="text-lg text-white">
                      {found.length === total ? "Great job ‚Äì you found everything!" : "Time‚Äôs up!"}
                    </p>
                    <Button onClick={completeGame} className="bg-white text-purple-700 hover:bg-purple-50">
                      Continue
                    </Button>
                  </div>
                )}
              </div>

              {/* Explanations list (updates live) */}
              {found.length > 0 && (
                <div className="bg-green-50 p-4 rounded-lg border border-green-200 shadow-inner">
                  <h4 className="font-semibold text-green-800 mb-2 flex items-center space-x-2">
                    <Info className="w-4 h-4" />
                    <span>What you discovered:</span>
                  </h4>
                  <ul className="list-disc pl-5 text-sm text-green-700 space-y-1">
                    {found.map((id) => {
                      const item = vulnerabilities.find((v) => v.id === id)!
                      return <li key={id}>{item.description}</li>
                    })}
                  </ul>
                </div>
              )}

              {/* Footer buttons when finished early */}
              {found.length === total && !ended && (
                <div className="text-center pt-4">
                  <Button onClick={completeGame} className="px-10 py-3 bg-gradient-to-r from-purple-600 to-pink-600">
                    Continue ‚Äì We‚Äôre done!
                  </Button>
                </div>
              )}
            </>
          )}
        </CardContent>
      </Card>
    </div>
  )
}
